<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
body,td,th {
font-family: "微软雅黑";
font-size: 13px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
demo_padding {
line-height: 30px;
}
html
{
overflow-x:hidden;
overflow-y:scroll;
}
.liebiao {
border-bottom-width: 1px;
border-bottom-style: dashed;
border-bottom-color: #CCCCCC;
height: 0px;
margin-top:10px;
margin-bottom:10px;
float: left;
width: 90%;
}
.liebiao ul {
list-style-type: none;
display: block;
margin: 0px;
clear: none;
}
.zhengwen {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px dashed #999999;
padding-right: 10px;
padding-left: 10px;
}
.shubu{
float: left;
height: 15px;
width: 15px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
font-size: 13px;
}
.kuang {
border: 1px solid #999999;
}
.red{color:#FF0000}
.orange{color:#FF6600}
.green{color:#008000}

a:hover {color:#000000}
a:active {color:#000000}

a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>
<div class="zhengwen"><b>综合<sup>10</sup></b>&nbsp;&nbsp;|&nbsp;&nbsp;<a href="762_local.htm">本地库<sup>10</sup></a>（<a href="762_periodical.htm">期刊<sup>6</sup></a>、<a href="762_thesis.htm">学位<sup>1</sup></a>、<a href="762_conference.htm">会议<sup></sup></a>、<a href="762_book.htm">图书<sup>3</sup></a>）&nbsp;&nbsp;|&nbsp;&nbsp;<a href="762_net.htm">互联网<sup></sup></a><br /></div>
<div class="zhengwen">
语句：<span class='orange' >__ init__为初始化函数（构造函数），构造函数中调用了父类 QWidget的构造函数。</span><br><br>
<div style="display:block;">该句相似度：<span class='orange' >48</span>%<a href='#xiugaijianyi' style='padding-left:30px;'>查看该句修改建议</a><b>（轻度相似，请酌情修改）</b><br><br></div>
在本地库和互联网共找出相似内容：10个
</div>

<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">1</div>
<font color="#666666">相似度：</font><span class='orange' >48</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >__init__为初始化<span style="background:#cbcbcb">函数</span>（<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>），<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>中<span style="background:#cbcbcb">调用</span>了父<span style="background:#cbcbcb">类</span>QWidget<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green">则在创建<span style="background:#cbcbcb">类</span>B<span style="background:#cbcbcb">的</span>对象（<span style="background:#cbcbcb">调用</span><span style="background:#cbcbcb">类</span>B<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>）时，会自动<span style="background:#cbcbcb">调用</span><span style="background:#cbcbcb">类</span>A<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>。</span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……左值。}后，若取消编辑，但却已经在数据库表中插入了一个空白的记录。这时需要将表示插入状ode）C++语言例题、习题及实验指导当类中包含子对象时，如：<span class='green'>则在创建类B的对象（调用类B的构造函数）时，会自动调用类A的构造函数。</span>如果类A的构造函数为有参函数时，通常采用初始化表的方式来调用构造函数。新类的……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(书籍数据)：</font><br>
<b>章节：</b>《第3 章构造函数和析构函数》<br><b>书名：</b>《C++语言例题、习题及实验指导》<br><b>作者：</b>陈志泊<br><b>出版社：</b>人民邮电出版社<br><b>出版时间：</b>2002-3-1<br><b>ISBN：</b>7-115-09869-7
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">2</div>
<font color="#666666">相似度：</font><span class='orange' >46</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >__init__为初始化<span style="background:#cbcbcb">函数</span>（<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>），<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>中调用了父<span style="background:#cbcbcb">类</span>QWidget<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green">参数<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>，有默认参数<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>，重载<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>，拷贝<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>，派生<span style="background:#cbcbcb">类</span><span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>，</span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……的顺序，而不是它们在成员初始化表中的顺序。3、结语通过对C++语言构造函数多种形式的学习，笔者发现使用构造函数初始化列表的形式初始化对象最为简明，无论是数带<span class='green'>参数的构造函数，有默认参数的构造函数，重载构造函数，拷贝构造函数，派生类的构造函数，</span>虚基类的构造函，转换构造函等各种形式的构造函数都可以用构造函数初始化列表代替。……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(学术期刊)：</font><br>
<b>篇名：</b>《C＋＋语言中的复杂构造函数深入分析》<br><b>作者：</b>王海涛 陈树宁<br><b>作者单位：</b>商丘职业技术学院,河南商丘,476000<br><b>参考文献：</b>5篇<br><b>页码：</b>P143—P144<br><b>分类号：</b>TP311.1<br><b>机标分类号：</b>TP3 TP2<br><b>期刊名称：</b>《数字技术与应用》<br><b>出版时间：</b>2011年9期<br><b>ISSN：</b>1007-9416<br><b>关键词：</b>类 构造函数 列表 参数<br><b>摘要：</b>C＋＋语言构造函数的作用是初始化对象。构造函数的多种形式都可以用构造函数初始化列表代替来提高效率,所以用C＋＋语言编程时应多使用构造函数初始化列表的形式初始化对象。本文的目的是对C＋＋＋语言的复杂构造函数有一个系统的认识落千丈,避免程序设计中出现失误。
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">3</div>
<font color="#666666">相似度：</font><span class='orange' >45</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >__init__为初始化<span style="background:#cbcbcb">函数</span>（<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>），<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>中<span style="background:#cbcbcb">调用</span><span style="background:#cbcbcb">了</span>父<span style="background:#cbcbcb">类</span>QWidget<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green"><span style="background:#cbcbcb">了</span>c<span style="background:#cbcbcb">类</span><span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>，执行c<span style="background:#cbcbcb">类</span><span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>时，先<span style="background:#cbcbcb">调用</span>基类<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>，基类<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span><span style="background:#cbcbcb">的</span></span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……顺序．(3)派生类的构造函数体中的内容，下面是一个派生类的例子【2J：运行结果为：说明：在主函数中声明了一个派生类c的对象0bj，生成对象幽时调用<span class='green'>了c类的构造函数，执行c类的构造函数时，先调用基类的构造函数，基类构造函数的</span>调用顺序是按照派生类声明时的顺序，先调用b2的构造函数，再b1的构造函数，再……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(学术期刊)：</font><br>
<b>篇名：</b>《C++构造函数的剖析》<br><b>作者：</b>宋初一 格日乐图 姜静清 姜明晨<br><b>作者单位：</b>福耀集团通辽有限公司,内蒙古,通辽,028052；阿拉善盟师范学校,物理教研室,内蒙古,巴彦浩特,750300；内蒙古民族大学,数学与计算机科学学院,内蒙古,通辽,028043；内蒙古通辽农牧机械化研究所,内蒙古,通辽,028000<br><b>参考文献：</b>3篇<br><b>被引次数：</b>3次（统计时间：2015年8月）<br><b>页码：</b>P502—P503<br><b>页数：</b>2页<br><b>分类号：</b>TP312<br><b>机标分类号：</b>TP3 O15<br><b>期刊名称：</b>《内蒙古民族大学学报(自然科学版)》<br><b>出版时间：</b>2003年6期<br><b>ISSN：</b>1671-0815<br><b>关键词：</b>类 构造函数 组合类 派生类<br><b>摘要：</b>详细分析了C++中构造函数和拷贝构造函数的作用,并深入探讨了构造函数在组合类、派生类、虚基类及其派生类中的不同作用规则,对其中一些作用规则给出具体应用实例.
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">4</div>
<font color="#666666">相似度：</font><span class='orange' >43</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >__init__为<span style="background:#cbcbcb">初始</span><span style="background:#cbcbcb">化</span><span style="background:#cbcbcb">函数</span>（<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>），<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>中<span style="background:#cbcbcb">调用</span>了<span style="background:#cbcbcb">父</span><span style="background:#cbcbcb">类</span>QWidget<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green">先于子类<span style="background:#cbcbcb">的</span>成员变量<span style="background:#cbcbcb">初始</span><span style="background:#cbcbcb">化</span>。（3）<span style="background:#cbcbcb">父</span><span style="background:#cbcbcb">类</span><span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>先于子类<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>被<span style="background:#cbcbcb">调用</span>。</span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……过程比较复杂，尤其是在有继承关系的条件下，类的装载一般遵循以下过程：（1）static变量比non-static变量早初始化，static变量只初始化一次。（2）父类的成员变量<span class='green'>先于子类的成员变量初始化。（3）父类的构造函数先于子类的构造函数被调用。</span>（4）同一类的成员变量不管是默认的初始化还是显式的初始化，都要早于构造函数的调……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(书籍数据)：</font><br>
<b>章节：</b>《5.3.4 类的装载过程》<br><b>书名：</b>《Java语言实用教程》<br><b>作者：</b>杨兆楠, 张剑飞<br><b>出版社：</b>哈尔滨工业大学出版社<br><b>出版时间：</b>2009-03-01<br><b>ISBN：</b>978-7-5603-2807-2<br><b>摘要：</b>本书介绍了Java语言的概况及特点，Java语言如何实现流程控制，Java的异常处理及I/O系统，Java的GUI设计等。
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">5</div>
<font color="#666666">相似度：</font><span class='orange' >42</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >__<span style="background:#cbcbcb">init</span>__为初始化<span style="background:#cbcbcb">函数</span>（<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>），<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span><span style="background:#cbcbcb">中</span><span style="background:#cbcbcb">调用</span>了父<span style="background:#cbcbcb">类</span>QWidget<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green">在<span style="background:#cbcbcb">Init</span><span style="background:#cbcbcb">函数</span>之后，能够在虚基<span style="background:#cbcbcb">类</span><span style="background:#cbcbcb">的</span>其他<span style="background:#cbcbcb">函数</span><span style="background:#cbcbcb">中</span><span style="background:#cbcbcb">调用</span>它，或是在其他<span style="background:#cbcbcb">类</span><span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span><span style="background:#cbcbcb">中</span></span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……缺省构造函数，而在删除了缺省构造函数以后，编译就会出错。虚基类的构造函数是唯一能够被调用的，而虚基类的缺省构造函数初始化参数能够不依赖于任何派生类，<span class='green'>在Init函数之后，能够在虚基类的其他函数中调用它，或是在其他类的构造函数中</span>调用，但是它只能被调用一次。3.6不能够获得构造函数的地址在C++中，构造函数……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(学术期刊)：</font><br>
<b>篇名：</b>《关于C++构造函数中的不合理设计的研究》<br><b>作者：</b>庄银霞<br><b>作者单位：</b>泉州信息工程学院 福建 泉州 362000<br><b>参考文献：</b>3篇<br><b>页码：</b>P139—P141<br><b>页数：</b>3页<br><b>期刊名称：</b>《信息技术与信息化》<br><b>出版时间：</b>2015年10期<br><b>ISSN：</b>1672-9528<br><b>关键词：</b>构造函数 C++ 不合理设计<br><b>摘要：</b>通常在C++中构件对象时,会调用一个特殊的函数,那就是构造函数.构造函数的作用是对每一个对象进行初始化,使对象在被使用前就能够拥有合理的结构,但构造函数中也存在一些不完美的设计,甚至存在一些不合理的特性,如构造函数的名称需要和类的名称一致等.在创建C++编译器的时候,一定要注意这些存在缺陷的设计.此外,在将来制定或者修改其他面向对象编程设计语言的C++标准的时候,也需要避免这些特性,本课题就针对C++构造函数中的不合理设计进行研究.
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">6</div>
<font color="#666666">相似度：</font><span class='orange' >42</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >__init__为初始化<span style="background:#cbcbcb">函数</span>（<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>），<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span><span style="background:#cbcbcb">中</span><span style="background:#cbcbcb">调用</span>了<span style="background:#cbcbcb">父</span><span style="background:#cbcbcb">类</span>QWidget<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green"><span style="background:#cbcbcb">的</span>无参<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>被覆盖<span style="background:#cbcbcb">的</span>话需要在子类<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span><span style="background:#cbcbcb">中</span>显式<span style="background:#cbcbcb">调用</span><span style="background:#cbcbcb">父</span><span style="background:#cbcbcb">类</span>带参数<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>。</span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……一个类的父类未定义构造函数或者显式定义了无参构造函数，子类在调用构造函数的时候，jvm实际上隐藏了一句代码super()，其含义就是调用父类的构造函数。如果父类<span class='green'>的无参构造函数被覆盖的话需要在子类构造函数中显式调用父类带参数的构造函数。</span>父类中既未定义无参又未定义带参构造函数，子类在调用时可以使用super()但不能……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(学术期刊)：</font><br>
<b>篇名：</b>《“礼让”原则学习Java对象初始化顺序》<br><b>作者：</b>武瑞婵<br><b>作者单位：</b>湖北文理学院数学与计算机科学学院,湖北襄阳,441053<br><b>参考文献：</b>4篇<br><b>页码：</b>P121—P123<br><b>页数：</b>3页<br><b>分类号：</b>TD312.1<br><b>机标分类号：</b>H31 TP3<br><b>期刊名称：</b>《襄阳职业技术学院学报》<br><b>出版时间：</b>2014年2期<br><b>ISSN：</b>1671-914X<br><b>关键词：</b>初始化顺序 “礼让”原则 继承 构造函数<br><b>摘要：</b>本文从教学角度对Java对象初始化顺序进行了实证分析,给出了JVM在执行过程中的“礼让”原则,最后还针对继承关系中构造函数的调用规则给出了更为简便和高效的记忆方法.
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">7</div>
<font color="#666666">相似度：</font><span class='orange' >41</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >__init__为初始化<span style="background:#cbcbcb">函数</span>（构造<span style="background:#cbcbcb">函数</span>），构造<span style="background:#cbcbcb">函数</span><span style="background:#cbcbcb">中</span><span style="background:#cbcbcb">调用</span><span style="background:#cbcbcb">了</span>父类QWidget<span style="background:#cbcbcb">的</span>构造<span style="background:#cbcbcb">函数</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green"><span style="background:#cbcbcb">调用</span><span style="background:#cbcbcb">中</span><span style="background:#cbcbcb">的</span>系统栈在main<span style="background:#cbcbcb">函数</span><span style="background:#cbcbcb">中</span><span style="background:#cbcbcb">调用</span><span style="background:#cbcbcb">了</span><span style="background:#cbcbcb">函数</span>ftma，在funa<span style="background:#cbcbcb">函数</span><span style="background:#cbcbcb">中</span><span style="background:#cbcbcb">调用</span><span style="background:#cbcbcb">了</span><span style="background:#cbcbcb">函数</span>funb。<span style="background:#cbcbcb">函数</span>funb结束</span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……内存中的代码区，CPU在这里取指令来执行。当发生函数调用时，函数的调用关系会动态保存到栈区，在被调用函数执行完成后正确返回到母函数。4．2．2函数<span class='green'>调用中的系统栈在main函数中调用了函数ftma，在funa函数中调用了函数funb。函数funb结束</span>后，应返回函数funa中继续执行，funa执行完成后，应回到main，执行余下的代码。这是……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(学位论文)：</font><br>
<b>篇名：</b>《Windows平台下软件安全漏洞研究》<br><b>作者：</b>彭赓<br><b>分类号：</b>TP309.2<br><b>学科专业：</b>信息与通信工程<br><b>授予学位：</b>硕士<br><b>导师姓名：</b>范明钰<br><b>学位授予单位：</b>电子科技大学<br><b>学位年度：</b>2010
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">8</div>
<font color="#666666">相似度：</font><span class='orange' >41</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >__init__为初始化<span style="background:#cbcbcb">函数</span>（<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>），<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>中调用了<span style="background:#cbcbcb">父</span><span style="background:#cbcbcb">类</span>QWidget<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green">，无参数子类<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>//<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>1，将子类<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span><span style="background:#cbcbcb">的</span>参数传递给<span style="background:#cbcbcb">父</span><span style="background:#cbcbcb">类</span><span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>，</span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……函数0<span class='green'>，无参数子类构造函数//构造函数1，将子类构造函数的参数传递给父类的构造函数，</span>基于父类对象构造子类对象－80－C++语言简明教程Mouse()//构造函数0<span class='green'>，无参数子类构造函数//构造函数1，将子类构造函数的参数传递给父类的构造函数，</span>基于父类对象构造子类对象CatTom("Tom"，5，3);;//新建一个Cat对象Tom，……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(书籍数据)：</font><br>
<b>章节：</b>《4.2.2 子类对象的销毁与析构函数》<br><b>书名：</b>《C++语言简明教程》<br><b>作者：</b>吴延海, 黄健<br><b>出版社：</b>西安电子科技大学出版社<br><b>出版时间：</b>2012-08-01<br><b>ISBN：</b>978-7-5606-2870-7<br><b>摘要：</b>本书内容包括C语言基本语法、C++基本语法特征、类和对象、类的继承性、类的多态性、贪吃蛇游戏设计及学籍管理系统。
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">9</div>
<font color="#666666">相似度：</font><span class='orange' >41</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >__init__为<span style="background:#cbcbcb">初始</span><span style="background:#cbcbcb">化</span><span style="background:#cbcbcb">函数</span>（<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>），<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>中调用了父类QWidget<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green">与成员域并列<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">初始</span><span style="background:#cbcbcb">化</span>甬数，<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>、默认<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>，<span style="background:#cbcbcb">函数</span>重载，析构<span style="background:#cbcbcb">函数</span>等概念。</span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……：将所有的成员都转换为公共的即可。完整代码如下所示：4结束语通过使用曾经学习过并熟练的C语言结构体知识，给出实例，提出问题，为了解决问题分删引入了初始化函数，<span class='green'>与成员域并列的初始化甬数，构造函数、默认构造函数，函数重载，析构函数等概念。</span>从比较巾修改少量代码给{lj等效的C++面向对象的代码实现。从而是学生从熟悉的……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(学术期刊)：</font><br>
<b>篇名：</b>《比较教学法在C++程序设计中的应用》<br><b>作者：</b>张华 高需<br><b>作者单位：</b>南阳理工学院,软件学院,河南,南阳,473004<br><b>参考文献：</b>4篇<br><b>页码：</b>P7306—P7308<br><b>分类号：</b>G642<br><b>机标分类号：</b>TP3 U49<br><b>期刊名称：</b>《电脑知识与技术》<br><b>出版时间：</b>2010年26期<br><b>ISSN：</b>1009-3044<br><b>关键词：</b>C++ 面向对象 比较教学法<br><b>摘要：</b>C++程序设计作为重要的基础课程,是较为难学的编程语言之一,尤其是面向对象思想的基本概念对于初学者来说更是如此.可通过比较教学法,采用C语言中的结构体类型模拟面向对象,并说明构造函数、析构函数、函数重载等面向对象的基本概念,语法和语义,从而有效摆脱陌生感,找到通向面向对象思想的入门途径.实践表明,该方法行之有效.
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">10</div>
<font color="#666666">相似度：</font><span class='orange' >41</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >__init__为初始化<span style="background:#cbcbcb">函数</span>（<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>），<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>中<span style="background:#cbcbcb">调用</span>了<span style="background:#cbcbcb">父</span><span style="background:#cbcbcb">类</span>QWidget<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">函数</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green">挪用Cconstruct<span style="background:#cbcbcb">类</span><span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">父</span><span style="background:#cbcbcb">类</span>Bconstruct<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">的</span>布局<span style="background:#cbcbcb">函数</span>，同理<span style="background:#cbcbcb">调用</span>去挪用Aconstruct<span style="background:#cbcbcb">构造</span><span style="background:#cbcbcb">的</span>布局<span style="background:#cbcbcb">函数</span>，执行完<span style="background:#cbcbcb">调用</span><span style="background:#cbcbcb">的</span></span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……若在基类中有构造的布局根本或基础就构造定义布局函数，那么所构造类布局函数定义中也可以省略对构造基类布局函例1：一个具有三层继承简单担任的例子：Bconstruct类派生得到，于是系统调用去<span class='green'>挪用Cconstruct类的父类Bconstruct构造的布局函数，同理调用去挪用Aconstruct构造的布局函数，执行完调用的</span>挪用。如果基类中构造定义布局函数，派生类是调用负责挪用构造基类布局函数；但如果构造的布局函数……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(学术期刊)：</font><br>
<b>篇名：</b>《解析C＋＋语言构造函数》<br><b>作者：</b>李广军 刘骥宇<br><b>作者单位：</b>商丘师范学院计算机与信息技术学院,河南商丘,476000<br><b>参考文献：</b>5篇<br><b>页码：</b>P55—P57<br><b>页数：</b>3页<br><b>分类号：</b>TP312<br><b>机标分类号：</b>TP3 O15<br><b>期刊名称：</b>《萍乡高等专科学校学报》<br><b>出版时间：</b>2012年3期<br><b>ISSN：</b>1007-9149<br><b>关键词：</b>C++语言 类 构造函数 参数<br><b>摘要：</b>C＋＋语言中的构造函数作用是为对象完成初始化，构造函数分为虚基类构造函数、拷贝构造函数、带参数的构造函数等。本文用具体实例说明构造函数初始化列表的使用方法，使得对象进行初始化过程更为简明，这样对C＋＋语言中的构造函数有一个系统的认识，以便于大家能更好地运用其构造函数。
</td>
</tr>
</table>




<div style="display:block;">
<table id="xiugaijianyi" width="100%" cellpadding="3" cellspacing="3" style="margin-bottom:15px;margin-top:15px;border: 1px solid #C0C0C0;"
bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF">
<tbody>
<tr>
<td width="100%">
<div class="green" style="font-size:17px;padding-left:5px;">
该句修改建议（轻度相似，请酌情修改）
</div>
</td>
</tr>
<tr>
<td>
<div class="shubu">
1
</div>
<span style="  padding-left:10px;font-size:15px;">
原句与相似内容重合部分（重点修改标红部分）：
</span>
</td>
</tr>
<tr>
<td>
<font class="green">
__init__为初始化<span class="red">函数</span>（<span class="red">构造</span><span class="red">函数</span>），<span class="red">构造</span><span class="red">函数</span>中<span class="red">调用</span>了父类QWidget的<span class="red">构造</span><span class="red">函数</span>。
</font>
</td>
</tr>
<tr>
<td>
<div class="shubu">
2
</div>
<span style="  padding-left:10px;font-size:15px;">
同义词：
</span>
</td>
</tr>
<tr>
<td width="100%" align="left">
<span class="red">构造：</span><span class="green">布局 机关 结构 </span><br/> <span class="red">调用：</span><span class="green">挪用 </span><br/>
</td>
</tr>
</tbody>
</table>
</div>

<div style="display:block;">
<a href="#">回到顶部</a>
</div>

<div style="margin-bottom:100px"></div>
<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2017 PaperPass
</p>
</div>
<div style="margin-bottom:700px"></div>
</body>
</html>
